CREATE TABLE post_cache (
  cache_key TEXT NOT NULL PRIMARY KEY,
  scope TEXT NOT NULL,
  post_id INTEGER NOT NULL,
  content TEXT NOT NULL,
  community_id INTEGER,
  community_title TEXT,
  community_image TEXT,
  user_id TEXT,
  user_name TEXT,
  image TEXT,
  likes_count INTEGER NOT NULL,
  comments_count INTEGER NOT NULL,
  is_liked INTEGER NOT NULL,
  date_millis INTEGER,
  ordering INTEGER NOT NULL,
  updated_at_millis INTEGER NOT NULL
);

selectPostsByScope:
SELECT *
FROM post_cache
WHERE scope = ?
ORDER BY ordering;

selectPostKeysByScope:
SELECT cache_key
FROM post_cache
WHERE scope = ?
ORDER BY ordering
LIMIT ?;

countPostsByScope:
SELECT COUNT(*)
FROM post_cache
WHERE scope = ?;

deletePostsByScope:
DELETE FROM post_cache
WHERE scope = ?;

deletePostByKey:
DELETE FROM post_cache
WHERE cache_key = ?;

insertPost:
INSERT OR REPLACE INTO post_cache(
  cache_key,
  scope,
  post_id,
  content,
  community_id,
  community_title,
  community_image,
  user_id,
  user_name,
  image,
  likes_count,
  comments_count,
  is_liked,
  date_millis,
  ordering,
  updated_at_millis
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

CREATE TABLE comment_cache (
  cache_key TEXT NOT NULL PRIMARY KEY,
  scope TEXT NOT NULL,
  comment_id INTEGER NOT NULL,
  post_id INTEGER NOT NULL,
  user_id TEXT,
  user_image TEXT,
  user_name TEXT,
  content TEXT NOT NULL,
  date_millis INTEGER,
  updated_at_millis INTEGER NOT NULL
);

selectCommentsByScope:
SELECT *
FROM comment_cache
WHERE scope = ?
ORDER BY updated_at_millis DESC;

deleteCommentsByScope:
DELETE FROM comment_cache
WHERE scope = ?;

insertComment:
INSERT OR REPLACE INTO comment_cache(
  cache_key,
  scope,
  comment_id,
  post_id,
  user_id,
  user_image,
  user_name,
  content,
  date_millis,
  updated_at_millis
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

CREATE TABLE community_cache (
  id INTEGER NOT NULL PRIMARY KEY,
  title TEXT NOT NULL,
  description TEXT,
  image TEXT,
  subscribers_count INTEGER NOT NULL,
  owner_id TEXT,
  created_at_millis INTEGER,
  updated_at_millis INTEGER NOT NULL
);

selectCommunityById:
SELECT *
FROM community_cache
WHERE id = ?;

deleteCommunityById:
DELETE FROM community_cache
WHERE id = ?;

insertCommunity:
INSERT OR REPLACE INTO community_cache(
  id,
  title,
  description,
  image,
  subscribers_count,
  owner_id,
  created_at_millis,
  updated_at_millis
) VALUES (?, ?, ?, ?, ?, ?, ?, ?);

CREATE TABLE community_search (
  key TEXT NOT NULL PRIMARY KEY,
  updated_at_millis INTEGER NOT NULL
);

CREATE TABLE community_search_entry (
  key TEXT NOT NULL,
  community_id INTEGER NOT NULL,
  position INTEGER NOT NULL,
  PRIMARY KEY (key, position)
);

selectCommunitiesForSearch:
SELECT community_id
FROM community_search_entry
WHERE key = ?
ORDER BY position;

selectSearchMetadata:
SELECT *
FROM community_search
WHERE key = ?;

insertSearchMetadata:
INSERT OR REPLACE INTO community_search(
  key,
  updated_at_millis
) VALUES (?, ?);

insertSearchEntry:
INSERT OR REPLACE INTO community_search_entry(
  key,
  community_id,
  position
) VALUES (?, ?, ?);

deleteSearchEntries:
DELETE FROM community_search_entry
WHERE key = ?;

deleteSearchMetadata:
DELETE FROM community_search
WHERE key = ?;
